/*
Deployment script for TimsGameReviews

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TimsGameReviews"
:setvar DefaultFilePrefix "TimsGameReviews"
:setvar DefaultDataPath "C:\Users\aweso\AppData\Local\Microsoft\VisualStudio\SSDT\TimsGameReviews"
:setvar DefaultLogPath "C:\Users\aweso\AppData\Local\Microsoft\VisualStudio\SSDT\TimsGameReviews"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Table [dbo].[Genre]...';


GO
CREATE TABLE [dbo].[Genre] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Rating]...';


GO
CREATE TABLE [dbo].[Rating] (
    [Id]     INT            IDENTITY (1, 1) NOT NULL,
    [CustID] INT            NULL,
    [GameID] INT            NULL,
    [Rating] FLOAT (53)     NULL,
    [Review] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [UName]           NVARCHAR (50) NULL,
    [PermissionLevel] INT           NULL,
    [Password]        NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[VideoGame]...';


GO
CREATE TABLE [dbo].[VideoGame] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Title]       NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (MAX) NOT NULL,
    [Price]       FLOAT (53)     NOT NULL,
    [Genre]       INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Procedure [dbo].[sp_AllGames]...';


GO
CREATE PROCEDURE [dbo].[sp_AllGames]
AS
begin
	set nocount on;
	SELECT [Id], [Title], [Description], [Price], [Genre]
	FROM dbo.VideoGame;
end
GO
PRINT N'Creating Procedure [dbo].[sp_AllGenres]...';


GO
CREATE PROCEDURE [dbo].[sp_AllGenres]
AS
begin
	set nocount on;
	SELECT * 
	FROM dbo.Genre;
end
GO
PRINT N'Creating Procedure [dbo].[sp_VerifyPassword]...';


GO
CREATE PROCEDURE [dbo].[sp_VerifyPassword]
    @UName NVARCHAR(50),
    @Password NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM [dbo].[Users]
    WHERE [UName] = @UName AND [Password] = @Password
END;
GO
PRINT N'Creating Procedure [dbo].[spAddReview]...';


GO
CREATE PROCEDURE [dbo].[spAddReview]
    @CustID INT,
    @GameID INT,
    @Rating FLOAT,
    @Review NVARCHAR(MAX),
    @Id INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    -- Check if a review with the same customer ID and game ID already exists
    IF NOT EXISTS (SELECT 1 FROM dbo.[Rating] WHERE CustID = @CustID AND GameID = @GameID)
    BEGIN
        -- If not exists, then insert the new review
        INSERT INTO dbo.[Rating] (CustID, GameID, Rating, Review)
        VALUES (@CustID, @GameID, @Rating, @Review);

        SET @Id = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        -- If a review already exists, set @Id to -1 to indicate failure)
        SET @Id = -1;
    END
END;
GO
PRINT N'Creating Procedure [dbo].[spGetGameRating]...';


GO
CREATE PROCEDURE [dbo].[spGetGameRating]
    @GameID INT,
    @AverageRating FLOAT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    -- Calculate the average rating for the specified GameID
    SELECT AVG(Rating)
    FROM dbo.[Rating]
    WHERE GameID = @GameID;
END;
GO
PRINT N'Creating Procedure [dbo].[spRatings_Delete]...';


GO
CREATE PROCEDURE [dbo].[spRatings_Delete]
@Id int
AS 
begin

	set nocount on;

	DELETE
	FROM dbo.[Rating]
	WHERE Id = @Id;

end
GO
PRINT N'Creating Procedure [dbo].[spRatings_GetById]...';


GO
CREATE PROCEDURE [dbo].[spRatings_GetById]
	@Id int
AS

begin

	set nocount on;

	SELECT *
	FROM dbo.[Rating]
	WHERE Id = @Id;

end
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
if not exists (select * from dbo.Genre)
begin
    insert into dbo.Genre([Name])
    values
    ('Horror'),
    ('Shooter'),
    ('RPG'),
    ('Open World'),
    ('Racing');
end


if not exists (select * from dbo.VideoGame)
begin
    insert into dbo.VideoGame([Title], [Description], [Price], [Genre])
    values 
    ('Grand Theft Auto Switch Edition', 'PG Rated crime game for kids!', 65.00, 2),
    ('Cookie Clicker', 'Keep clicking those cookies!', 1.00, 5),
    ('The Legend of Zelda Playstation Edition', 'Zelda but sony made it', 70.00, 4); 
end

if not exists (select * from dbo.Users)
begin
    insert into dbo.Users([UName], [PermissionLevel], [Password])
    values
    ('Admin', 2, 'Password'),
    ('User', 1, 'password'),
    ('User1', 1, 'password');
end
GO

GO
PRINT N'Update complete.';


GO
