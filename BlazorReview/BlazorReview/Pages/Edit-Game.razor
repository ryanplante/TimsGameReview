@page "/edit-game/{GameId}"
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<h3>Edit Game</h3>

@if (game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@game" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Title:</label>
            <InputText id="title" @bind-Value="game.title" class="form-control" />
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea id="description" @bind-Value="game.description" class="form-control" />
        </div>

        <div class="form-group">
            <label for="price">Price:</label>
            <InputNumber id="price" @bind-Value="game.price" class="form-control" />
        </div>

        <div class="form-group">
            <label for="genre">Genre:</label>
            <InputNumber id="genre" @bind-Value="game.genre" class="form-control" />
        </div>

        <button type="submit" class="btn btn-success">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public string GameId { get; set; }

    private GameModel game;

    protected override async Task OnInitializedAsync()
    {
        game = await HttpClient.GetFromJsonAsync<GameModel>($"/api/VideoRating/GetGame/{GameId}");
    }

    private async Task HandleValidSubmit()
    {
        var response = await HttpClient.PutAsJsonAsync($"/api/VideoRating/UpdateGame/{game.id}", game);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/admin");
        }
        else
        {
            // Handle errors
        }
    }
}