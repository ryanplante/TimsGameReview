@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorReview</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/login">
                <span class="oi oi-key" aria-hidden="true"></span> Login
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/reviews">
                <span class="oi oi-star" aria-hidden="true"></span> Reviews
            </NavLink>
        </li>
        @if (IsAdmin)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="/admin">
                    <span class="oi oi-lock-unlocked" aria-hidden="true"></span> Admin
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool IsAdmin = false;
    private System.Threading.Timer _timer;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckAdminStatus();
        _timer = new System.Threading.Timer(async _ =>
        {
            await CheckAdminStatus();
        }, null, 0, 5000); // Re-check every 5 seconds
    }

    private async Task CheckAdminStatus()
    {
        var isAdminNow = await SessionStorage.GetItemAsStringAsync("PermissionLevel") == "2";
        if (isAdminNow != IsAdmin)
        {
            IsAdmin = isAdminNow;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
